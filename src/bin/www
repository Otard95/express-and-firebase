#!/usr/bin/env node

/**
 * Module dependencies.
*/

let server = require('../server');
let debug = require('debug')('express-quick-start:server');
let tls = require('tls');
let http = require('http');
let fs = require('fs');
// let forceSSL = require('express-force-ssl');

let app = server.Server.bootstrap().app;

/**
 * Get port from environment and store in Express.
*/

let port = normalizePort(process.env.PORT || '3000');
let s_port = normalizePort('3443');

app.set('port', port);
// app.use(forceSSL);

/**
 * Create HTTP server.
*/

let http_server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
*/


http_server.listen(port, onListening);
http_server.on('error', onError);

/**
 * Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
*/

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
*/

function onListening() {
	let addr = http_server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	console.log('Listening on ' + bind);
}
